(function(e) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = e();
    } else if (typeof define === "function" && define.amd) {
        define([], e);
    } else {
        var n;
        if (typeof window !== "undefined") {
            n = window;
        } else if (typeof global !== "undefined") {
            n = global;
        } else if (typeof self !== "undefined") {
            n = self;
        } else {
            n = this;
        }
        n.dragula = e();
    }
})(function() {
    var e, n, t;
    return function r(e, n, t) {
        function o(a, u) {
            if (!n[a]) {
                if (!e[a]) {
                    var s = typeof require == "function" && require;
                    if (!u && s) return s(a, !0);
                    if (i) return i(a, !0);
                    var f = new Error("Cannot find module '" + a + "'");
                    throw f.code = "MODULE_NOT_FOUND", f;
                }
                var c = n[a] = {
                    exports: {}
                };
                e[a][0].call(c.exports, function(n) {
                    var t = e[a][1][n];
                    return o(t ? t : n);
                }, c, c.exports, r, e, n, t);
            }
            return n[a].exports;
        }
        var i = typeof require == "function" && require;
        for (var a = 0; a < t.length; a++) o(t[a]);
        return o;
    }({
        "/home/masud/projects/dragula/classes.js": [ function(e, n, t) {
            "use strict";
            var r = {};
            var o = "(?:^|\\s)";
            var i = "(?:\\s|$)";
            function a(e) {
                var n = r[e];
                if (n) {
                    n.lastIndex = 0;
                } else {
                    r[e] = n = new RegExp(o + e + i, "g");
                }
                return n;
            }
            function u(e, n) {
                var t = e.className;
                if (!t.length) {
                    e.className = n;
                } else if (!a(n).test(t)) {
                    e.className += " " + n;
                }
            }
            function s(e, n) {
                e.className = e.className.replace(a(n), " ").trim();
            }
            n.exports = {
                add: u,
                rm: s
            };
        }, {} ],
        "/home/masud/projects/dragula/dragula.js": [ function(e, n, t) {
            (function(t) {
                "use strict";
                var r = e("contra/emitter");
                var o = e("crossvent");
                var i = e("./classes");
                var a = window.Polymer ? window.Polymer.dom : function(e) {
                    return e;
                };
                var u = window.Polymer ? window.Polymer.Gestures : null;
                function s(e, n) {
                    var t = arguments.length;
                    if (t === 1 && Array.isArray(e) === false) {
                        n = e;
                        e = [];
                    }
                    var o = document.body;
                    var u = document.documentElement;
                    var s;
                    var l;
                    var y;
                    var b;
                    var j;
                    var N;
                    var E;
                    var x;
                    var C;
                    var _ = null;
                    var O;
                    var S = n || {};
                    if (S.moves === void 0) {
                        S.moves = m;
                    }
                    if (S.accepts === void 0) {
                        S.accepts = m;
                    }
                    if (S.invalid === void 0) {
                        S.invalid = I;
                    }
                    if (S.containers === void 0) {
                        S.containers = e || [];
                    }
                    if (S.isContainer === void 0) {
                        S.isContainer = v;
                    }
                    if (S.copy === void 0) {
                        S.copy = false;
                    }
                    if (S.revertOnSpill === void 0) {
                        S.revertOnSpill = false;
                    }
                    if (S.removeOnSpill === void 0) {
                        S.removeOnSpill = false;
                    }
                    if (S.direction === void 0) {
                        S.direction = "vertical";
                    }
                    if (S.mirrorContainer === void 0) {
                        S.mirrorContainer = o;
                    }
                    var T = r({
                        containers: S.containers,
                        start: M,
                        end: U,
                        cancel: H,
                        remove: G,
                        destroy: X,
                        dragging: false
                    });
                    if (S.removeOnSpill === true) {
                        T.on("over", W).on("out", Z);
                    }
                    k();
                    return T;
                    function P(e) {
                        return T.containers.indexOf(e) !== -1 || S.isContainer(e);
                    }
                    function k(e) {
                        var n = e ? "remove" : "add";
                        f(u, n, "mousedown", Y);
                        f(u, n, "mouseup", K);
                    }
                    function B(e) {
                        var n = e ? "remove" : "add";
                        f(u, n, "mousemove", A);
                    }
                    function D(e) {
                        var n = e ? "remove" : "add";
                        f(u, n, "selectstart", R);
                        f(u, n, "click", R);
                    }
                    function X() {
                        k(true);
                        K({});
                    }
                    function R(e) {
                        if (O) {
                            e.preventDefault();
                        }
                    }
                    function Y(e) {
                        var n = e.which !== 0 && e.which !== 1 || e.metaKey || e.ctrlKey;
                        if (n) {
                            return;
                        }
                        var t = e.target;
                        var r = L(t);
                        if (!r) {
                            return;
                        }
                        O = r;
                        B();
                        if (e.type === "mousedown") {
                            e.preventDefault();
                            if (t.tagName === "INPUT" || t.tagName === "TEXTAREA") {
                                t.focus();
                            }
                        }
                    }
                    function A(e) {
                        var n = O;
                        B(true);
                        D();
                        U();
                        q(n);
                        var t = c(y);
                        b = w("pageX", e) - t.left;
                        j = w("pageY", e) - t.top;
                        i.add(x || y, "gu-transit");
                        ee();
                        Q(e);
                    }
                    function L(e) {
                        if (T.dragging && s) {
                            return;
                        }
                        if (P(e)) {
                            return;
                        }
                        var n = e;
                        while (e.parentNode && P(e.parentNode) === false) {
                            if (S.invalid(e, n)) {
                                return;
                            }
                            e = e.parentNode;
                            if (!e) {
                                return;
                            }
                        }
                        var t = e.parentNode;
                        if (!t) {
                            return;
                        }
                        if (S.invalid(e, n)) {
                            return;
                        }
                        var r = S.moves(e, t, n);
                        if (!r) {
                            return;
                        }
                        return {
                            item: e,
                            source: t
                        };
                    }
                    function M(e) {
                        var n = L(e);
                        if (n) {
                            q(n);
                        }
                    }
                    function q(e) {
                        if (oe(e.item, e.source)) {
                            x = a(e.item).cloneNode(true);
                            x["data"] = e.item["data"];
                            T.emit("cloned", e.item, x, e.source);
                            T.emit("cloned", x, e.item, "copy");
                        }
                        l = e.source;
                        y = e.item;
                        N = E = h(e.item);
                        T.dragging = true;
                        T.emit("drag", y, l);
                    }
                    function I() {
                        return false;
                    }
                    function U() {
                        if (!T.dragging) {
                            return;
                        }
                        var e = x || y;
                        z(e, e.parentNode);
                    }
                    function F() {
                        O = false;
                        B(true);
                        D(true);
                    }
                    function K(e) {
                        F();
                        if (!T.dragging) {
                            return;
                        }
                        var n = x || y;
                        var t = w("clientX", e);
                        var r = w("clientY", e);
                        var o = d(s, t, r);
                        var i = J(o, t, r);
                        if (i && (!x || i !== l)) {
                            z(n, i);
                        } else if (S.removeOnSpill) {
                            G();
                        } else {
                            H();
                        }
                    }
                    function z(e, n) {
                        if ($(n)) {
                            T.emit("cancel", e, l);
                        } else {
                            T.emit("drop", e, n, l);
                        }
                        V();
                    }
                    function G() {
                        if (!T.dragging) {
                            return;
                        }
                        var e = x || y;
                        var n = a(e).parentNode;
                        if (n) {
                            a(n).removeChild(e);
                        }
                        T.emit(x ? "cancel" : "remove", e, n);
                        V();
                    }
                    function H(e) {
                        if (!T.dragging) {
                            return;
                        }
                        var n = arguments.length > 0 ? e : S.revertOnSpill;
                        var t = x || y;
                        var r = a(t).parentNode;
                        if (r === l && x) {
                            a(r).removeChild(x);
                        }
                        var o = $(r);
                        if (o === false && !x && n) {
                            a(l).insertBefore(a(t), a(N));
                        }
                        if (o || n) {
                            T.emit("cancel", t, l);
                        } else {
                            T.emit("drop", t, r, l);
                        }
                        V();
                    }
                    function V() {
                        var e = x || y;
                        F();
                        ne();
                        if (e) {
                            i.rm(e, "gu-transit");
                        }
                        if (C) {
                            clearTimeout(C);
                        }
                        T.dragging = false;
                        T.emit("out", e, _, l);
                        T.emit("dragend", e);
                        l = y = x = N = E = C = _ = null;
                    }
                    function $(e, n) {
                        var t;
                        if (n !== void 0) {
                            t = n;
                        } else if (s) {
                            t = E;
                        } else {
                            t = h(x || y);
                        }
                        return e === l && t === N;
                    }
                    function J(e, n, t) {
                        var r = e;
                        while (r && !o()) {
                            r = r.parentNode;
                        }
                        return r;
                        function o() {
                            var o = P(r);
                            if (o === false) {
                                return false;
                            }
                            var i = te(r, e);
                            var a = re(r, i, n, t);
                            var u = $(r, a);
                            if (u) {
                                return true;
                            }
                            return S.accepts(y, r, l, a);
                        }
                    }
                    function Q(e) {
                        if (!s) {
                            return;
                        }
                        e.preventDefault();
                        var n = w("clientX", e);
                        var t = w("clientY", e);
                        var r = n - b;
                        var o = t - j;
                        s.style.left = r + "px";
                        s.style.top = o + "px";
                        var i = x || y;
                        var u = d(s, n, t);
                        var f = J(u, n, t);
                        var c = f !== null && f !== _;
                        if (c || f === null) {
                            C();
                            _ = f;
                            g();
                        }
                        if (f === l && x) {
                            if (a(i).parentNode) {
                                a(i).parentNode.removeChild(i);
                            }
                            return;
                        }
                        var v;
                        var m = te(f, u);
                        if (m !== null && m.nodeName !== "#document") {
                            v = re(f, m, n, t);
                        } else if (S.revertOnSpill === true && !x) {
                            v = N;
                            f = l;
                        } else {
                            if (x && a(i).parentNode) {
                                a(i).parentNode.removeChild(i);
                            }
                            return;
                        }
                        if (v === null || v !== i && v !== h(i) && v !== E) {
                            E = v;
                            if (!v || O(f, v)) {
                                a(f).appendChild(i);
                                a.flush();
                                T.emit("shadow", i, f);
                            }
                        }
                        function p(e) {
                            T.emit(e, i, _, l);
                        }
                        function g() {
                            if (c) {
                                p("over");
                            }
                        }
                        function C() {
                            if (_) {
                                p("out");
                            }
                        }
                        function O(e, n) {
                            var t = n.parentNode;
                            while (t !== null) {
                                if (t === e) {
                                    return true;
                                }
                                t = t.parentNode;
                            }
                            return false;
                        }
                    }
                    function W(e) {
                        i.rm(e, "gu-hide");
                    }
                    function Z(e) {
                        if (T.dragging) {
                            i.add(e, "gu-hide");
                        }
                    }
                    function ee() {
                        if (s) {
                            return;
                        }
                        var e = y.getBoundingClientRect();
                        s = a(y).cloneNode(true);
                        s["data"] = y["data"];
                        s.style.width = p(e) + "px";
                        s.style.height = g(e) + "px";
                        i.rm(s, "gu-transit");
                        i.add(s, "gu-mirror");
                        S.mirrorContainer.appendChild(s);
                        f(u, "add", "mousemove", Q);
                        i.add(S.mirrorContainer, "gu-unselectable");
                        T.emit("cloned", s, y, "mirror");
                    }
                    function ne() {
                        if (s) {
                            i.rm(S.mirrorContainer, "gu-unselectable");
                            f(u, "remove", "mousemove", Q);
                            a(s).parentNode.removeChild(s);
                            s = null;
                        }
                    }
                    function te(e, n) {
                        var t = n;
                        while (t !== e && t.parentNode !== e) {
                            t = t.parentNode;
                        }
                        if (t === u) {
                            return null;
                        }
                        return t;
                    }
                    function re(e, n, t, r) {
                        var o = S.direction === "horizontal";
                        var i = n !== e ? u() : a();
                        return i;
                        function a() {
                            var n = e.children.length;
                            var i;
                            var a;
                            var u;
                            for (i = 0; i < n; i++) {
                                a = e.children[i];
                                u = a.getBoundingClientRect();
                                if (o && u.left > t) {
                                    return a;
                                }
                                if (!o && u.top > r) {
                                    return a;
                                }
                            }
                            return null;
                        }
                        function u() {
                            var e = n.getBoundingClientRect();
                            if (o) {
                                return s(t > e.left + p(e) / 2);
                            }
                            return s(r > e.top + g(e) / 2);
                        }
                        function s(e) {
                            return e ? h(n) : n;
                        }
                    }
                    function oe(e, n) {
                        return typeof S.copy === "boolean" ? S.copy : S.copy(e, n);
                    }
                }
                function f(e, n, r, i) {
                    var a = {
                        mouseup: "touchend",
                        mousedown: "touchstart",
                        mousemove: "touchmove"
                    };
                    var u = {
                        mouseup: "MSPointerUp",
                        mousedown: "MSPointerDown",
                        mousemove: "MSPointerMove"
                    };
                    if (t.navigator.msPointerEnabled) {
                        o[n](e, u[r], i);
                    }
                    o[n](e, a[r], i);
                    o[n](e, r, i);
                }
                function c(e) {
                    var n = e.getBoundingClientRect();
                    return {
                        left: n.left + l("scrollLeft", "pageXOffset"),
                        top: n.top + l("scrollTop", "pageYOffset")
                    };
                }
                function l(e, n) {
                    if (typeof t[n] !== "undefined") {
                        return t[n];
                    }
                    var r = document.documentElement;
                    if (r.clientHeight) {
                        return r[e];
                    }
                    var o = document.body;
                    return o[e];
                }
                function d(e, n, t) {
                    var r = e || {};
                    var o = r.className;
                    var i;
                    r.className += " gu-hide";
                    i = u ? u.deepTargetFind(n, t) : document.elementFromPoint(n, t);
                    r.className = o;
                    return i;
                }
                function v() {
                    return false;
                }
                function m() {
                    return true;
                }
                function p(e) {
                    return e.width || e.right - e.left;
                }
                function g(e) {
                    return e.height || e.bottom - e.top;
                }
                function h(e) {
                    return e.nextElementSibling || n();
                    function n() {
                        var n = e;
                        do {
                            n = n.nextSibling;
                        } while (n && n.nodeType !== 1);
                        return n;
                    }
                }
                function y(e) {
                    if (e.targetTouches && e.targetTouches.length) {
                        return e.targetTouches[0];
                    }
                    if (e.changedTouches && e.changedTouches.length) {
                        return e.changedTouches[0];
                    }
                    return e;
                }
                function w(e, n) {
                    var t = y(n);
                    var r = {
                        pageX: "clientX",
                        pageY: "clientY"
                    };
                    if (e in r && !(e in t) && r[e] in t) {
                        e = r[e];
                    }
                    return t[e];
                }
                n.exports = s;
            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {
            "./classes": "/home/masud/projects/dragula/classes.js",
            "contra/emitter": "/home/masud/projects/dragula/node_modules/contra/emitter.js",
            crossvent: "/home/masud/projects/dragula/node_modules/crossvent/src/crossvent.js"
        } ],
        "/home/masud/projects/dragula/node_modules/contra/debounce.js": [ function(e, n, t) {
            "use strict";
            var r = e("ticky");
            n.exports = function o(e, n, t) {
                if (!e) {
                    return;
                }
                r(function o() {
                    e.apply(t || null, n || []);
                });
            };
        }, {
            ticky: "/home/masud/projects/dragula/node_modules/contra/node_modules/ticky/ticky-browser.js"
        } ],
        "/home/masud/projects/dragula/node_modules/contra/emitter.js": [ function(e, n, t) {
            "use strict";
            var r = e("atoa");
            var o = e("./debounce");
            n.exports = function i(e, n) {
                var t = n || {};
                var i = {};
                if (e === undefined) {
                    e = {};
                }
                e.on = function(n, t) {
                    if (!i[n]) {
                        i[n] = [ t ];
                    } else {
                        i[n].push(t);
                    }
                    return e;
                };
                e.once = function(n, t) {
                    t._once = true;
                    e.on(n, t);
                    return e;
                };
                e.off = function(n, t) {
                    var r = arguments.length;
                    if (r === 1) {
                        delete i[n];
                    } else if (r === 0) {
                        i = {};
                    } else {
                        var o = i[n];
                        if (!o) {
                            return e;
                        }
                        o.splice(o.indexOf(t), 1);
                    }
                    return e;
                };
                e.emit = function() {
                    var n = r(arguments);
                    return e.emitterSnapshot(n.shift()).apply(this, n);
                };
                e.emitterSnapshot = function(n) {
                    var a = (i[n] || []).slice(0);
                    return function() {
                        var i = r(arguments);
                        var u = this || e;
                        if (n === "error" && t.throws !== false && !a.length) {
                            throw i.length === 1 ? i[0] : i;
                        }
                        a.forEach(function s(r) {
                            if (t.async) {
                                o(r, i, u);
                            } else {
                                r.apply(u, i);
                            }
                            if (r._once) {
                                e.off(n, r);
                            }
                        });
                        return e;
                    };
                };
                return e;
            };
        }, {
            "./debounce": "/home/masud/projects/dragula/node_modules/contra/debounce.js",
            atoa: "/home/masud/projects/dragula/node_modules/contra/node_modules/atoa/atoa.js"
        } ],
        "/home/masud/projects/dragula/node_modules/contra/node_modules/atoa/atoa.js": [ function(e, n, t) {
            n.exports = function r(e, n) {
                return Array.prototype.slice.call(e, n);
            };
        }, {} ],
        "/home/masud/projects/dragula/node_modules/contra/node_modules/ticky/ticky-browser.js": [ function(e, n, t) {
            var r = typeof setImmediate === "function", o;
            if (r) {
                o = function(e) {
                    setImmediate(e);
                };
            } else {
                o = function(e) {
                    setTimeout(e, 0);
                };
            }
            n.exports = o;
        }, {} ],
        "/home/masud/projects/dragula/node_modules/crossvent/node_modules/custom-event/index.js": [ function(e, n, t) {
            (function(e) {
                var t = e.CustomEvent;
                function r() {
                    try {
                        var e = new t("cat", {
                            detail: {
                                foo: "bar"
                            }
                        });
                        return "cat" === e.type && "bar" === e.detail.foo;
                    } catch (n) {}
                    return false;
                }
                n.exports = r() ? t : "function" === typeof document.createEvent ? function o(e, n) {
                    var t = document.createEvent("CustomEvent");
                    if (n) {
                        t.initCustomEvent(e, n.bubbles, n.cancelable, n.detail);
                    } else {
                        t.initCustomEvent(e, false, false, void 0);
                    }
                    return t;
                } : function i(e, n) {
                    var t = document.createEventObject();
                    t.type = e;
                    if (n) {
                        t.bubbles = Boolean(n.bubbles);
                        t.cancelable = Boolean(n.cancelable);
                        t.detail = n.detail;
                    } else {
                        t.bubbles = false;
                        t.cancelable = false;
                        t.detail = void 0;
                    }
                    return t;
                };
            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {} ],
        "/home/masud/projects/dragula/node_modules/crossvent/src/crossvent.js": [ function(e, n, t) {
            (function(t) {
                "use strict";
                var r = e("custom-event");
                var o = e("./eventmap");
                var i = t.document;
                var a = f;
                var u = l;
                var s = [];
                if (!t.addEventListener) {
                    a = c;
                    u = d;
                }
                n.exports = {
                    add: a,
                    remove: u,
                    fabricate: v
                };
                function f(e, n, t, r) {
                    return e.addEventListener(n, t, r);
                }
                function c(e, n, t) {
                    return e.attachEvent("on" + n, p(e, n, t));
                }
                function l(e, n, t, r) {
                    return e.removeEventListener(n, t, r);
                }
                function d(e, n, t) {
                    var r = g(e, n, t);
                    if (r) {
                        return e.detachEvent("on" + n, r);
                    }
                }
                function v(e, n, t) {
                    var a = o.indexOf(n) === -1 ? s() : u();
                    if (e.dispatchEvent) {
                        e.dispatchEvent(a);
                    } else {
                        e.fireEvent("on" + n, a);
                    }
                    function u() {
                        var e;
                        if (i.createEvent) {
                            e = i.createEvent("Event");
                            e.initEvent(n, true, true);
                        } else if (i.createEventObject) {
                            e = i.createEventObject();
                        }
                        return e;
                    }
                    function s() {
                        return new r(n, {
                            detail: t
                        });
                    }
                }
                function m(e, n, r) {
                    return function o(n) {
                        var o = n || t.event;
                        o.target = o.target || o.srcElement;
                        o.preventDefault = o.preventDefault || function i() {
                            o.returnValue = false;
                        };
                        o.stopPropagation = o.stopPropagation || function a() {
                            o.cancelBubble = true;
                        };
                        o.which = o.which || o.keyCode;
                        r.call(e, o);
                    };
                }
                function p(e, n, t) {
                    var r = g(e, n, t) || m(e, n, t);
                    s.push({
                        wrapper: r,
                        element: e,
                        type: n,
                        fn: t
                    });
                    return r;
                }
                function g(e, n, t) {
                    var r = h(e, n, t);
                    if (r) {
                        var o = s[r].wrapper;
                        s.splice(r, 1);
                        return o;
                    }
                }
                function h(e, n, t) {
                    var r, o;
                    for (r = 0; r < s.length; r++) {
                        o = s[r];
                        if (o.element === e && o.type === n && o.fn === t) {
                            return r;
                        }
                    }
                }
            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {
            "./eventmap": "/home/masud/projects/dragula/node_modules/crossvent/src/eventmap.js",
            "custom-event": "/home/masud/projects/dragula/node_modules/crossvent/node_modules/custom-event/index.js"
        } ],
        "/home/masud/projects/dragula/node_modules/crossvent/src/eventmap.js": [ function(e, n, t) {
            (function(e) {
                "use strict";
                var t = [];
                var r = "";
                var o = /^on/;
                for (r in e) {
                    if (o.test(r)) {
                        t.push(r.slice(2));
                    }
                }
                n.exports = t;
            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {} ]
    }, {}, [ "/home/masud/projects/dragula/dragula.js" ])("/home/masud/projects/dragula/dragula.js");
});